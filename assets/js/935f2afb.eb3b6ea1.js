"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started","href":"/","docId":"getting-started"},{"type":"link","label":"Validation rules & error messages","href":"/validation-rules","docId":"validation-rules"},{"type":"link","label":"Showing validation errors","href":"/showing-errors","docId":"showing-errors"},{"type":"link","label":"Getting form values","href":"/getting-form-values","docId":"getting-form-values"},{"type":"link","label":"Listening for changes","href":"/listening-for-changes","docId":"listening-for-changes"},{"type":"link","label":"Submitting","href":"/submitting","docId":"submitting"},{"type":"link","label":"Dirty Check","href":"/dirty-check","docId":"dirty-check"},{"type":"link","label":"Resetting the form & setting values","href":"/resetting","docId":"resetting"},{"type":"link","label":"Nested fields","href":"/nested_fields","docId":"nested_fields"},{"type":"link","label":"Custom form controls","href":"/custom-elements","docId":"custom-elements"},{"type":"link","label":"Usage in React","href":"/react","docId":"react"},{"type":"link","label":"Usage in Remix","href":"/remix","docId":"remix"},{"type":"link","label":"API","href":"/api","docId":"api"},{"type":"link","label":"Examples","href":"/examples","docId":"examples"}]},"docs":{"api":{"id":"api","title":"API","description":"``","sidebar":"tutorialSidebar"},"custom-elements":{"id":"custom-elements","title":"Custom form controls","description":"Sometimes we need use non-standard controls in our forms. Web Components, for example, don\'t work well with forms.","sidebar":"tutorialSidebar"},"dirty-check":{"id":"dirty-check","title":"Dirty Check","description":"A form is \\"dirty\\" if any of its field has changed since:","sidebar":"tutorialSidebar"},"examples":{"id":"examples","title":"Examples","description":"Simple signup form","sidebar":"tutorialSidebar"},"getting-form-values":{"id":"getting-form-values","title":"Getting form values","description":"As shown in the Basic Usage Section, ` submit` event gives the form values:","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"informel is a Web Component that wraps your native HTML forms and gives them super powers.","sidebar":"tutorialSidebar"},"listening-for-changes":{"id":"listening-for-changes","title":"Listening for changes","description":"`` exposes the following events","sidebar":"tutorialSidebar"},"nested_fields":{"id":"nested_fields","title":"Nested fields","description":"Informel supports nested fields (arrays or objects or arrays of objects). Just specify the object path in the name attribute of the field.","sidebar":"tutorialSidebar"},"react":{"id":"react","title":"Usage in React","description":"Using Web Components in React is not always easy, especially when it comes to handling events.","sidebar":"tutorialSidebar"},"remix":{"id":"remix","title":"Usage in Remix","description":"Remix uses Server Side Rendering (SSR) to render the page on the server and then hydrates the page on the client side.","sidebar":"tutorialSidebar"},"resetting":{"id":"resetting","title":"Resetting the form & setting values","description":"Resetting the form","sidebar":"tutorialSidebar"},"showing-errors":{"id":"showing-errors","title":"Showing validation errors","description":"When wrapping form controls in ``, validation errors are automatically displayed:","sidebar":"tutorialSidebar"},"submitting":{"id":"submitting","title":"Submitting","description":"informel relies on the `` being submitted. This happens when:","sidebar":"tutorialSidebar"},"validation-rules":{"id":"validation-rules","title":"Validation rules & error messages","description":"Custom validation rules","sidebar":"tutorialSidebar"}}}')}}]);